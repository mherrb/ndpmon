#!/bin/sh

### BEGIN INIT INFO
# Provides:          ndpmon
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start ndpmon daemon at boot time
# Description:       Enable services provided by ndpmon daemon
### END INIT INFO

# Author: John R. Baskwill <jrb28@psu.edu>
# Modified by Frederic Beck <

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin





prefix=@prefix@
exec_prefix=@exec_prefix@
datadir=@datadir@
confdir=@sysconfdir@
datadir=@datadir@
localstatedir=@localstatedir@

INSTALL_DIR=$prefix/ndpmon
MAN_DIR=@MANDIR@
BINARY_DIR=@sbindir@
confprefix=@CONFDIR@
CONF_DIR=$confprefix/ndpmon
dataprefix=@VARDATADIR@
DATA_DIR=$dataprefix/ndpmon


DESC="IPv6 Neighbor Discovery Protocol Monitor"
NAME="ndpmon"
DAEMON="$BINARY_DIR/ndpmon"
DAEMON_ARGS=""
CONFIG="$CONF_DIR/config_ndpmon.xml"
HOMEDIR="$INSTALL_DIR"
LOGDIR="/var/log/"
PIDFILE="/var/run/ndpmon.pid"
SCRIPTNAME=/etc/init.d/$NAME


# Exit if the daemont is not installed
[ -x $DAEMON ] || exit 0

# Exit if the config file is not installed 
[ -f $CONFIG ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Identify the distribution
if [ -f /etc/debian_version ]
then
	DISTRIB="DEBIAN"
elif [ -f /etc/fedora-release ]
then
	DISTRIB="FEDORA"
elif [ -f /etc/redhat-release ]
then
	DISTRIB="REDHAT"
fi

if [ $DISTRIB != "DEBIAN" ]
then
	# Source function library.
	. /etc/init.d/functions
else	
	# Load the VERBOSE setting and other rcS variables
	. /lib/init/vars.sh

	# Define LSB log_* functions.
	# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
	. /lib/lsb/init-functions
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	if [ "$(id -u)" != "0" ]; then
	    echo ndpmon can only be started by root
	    exit 0
	fi

	if [ $DISTRIB = "DEBIAN" ]
	then
		start-stop-daemon --start \
				  --quiet \
				  --background \
				  --make-pidfile \
				  --pidfile $PIDFILE \
				  --exec $DAEMON \
				  --test > /dev/null \
				  || return 1
		start-stop-daemon --start \
				  --quiet \
				  --background \
				  --make-pidfile \
				  --pidfile $PIDFILE \
				  --exec $DAEMON \
				  -- $DAEMON_ARGS \
				  || return 2
	else
		daemon +5 $NAME  1>/dev/null 2>&1 &
	fi

}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	if [ "$(id -u)" != "0" ]; then
	    echo ndpmon can only be stopped by root
	    exit 0
	fi

	if [ $DISTRIB = "DEBIAN" ]
	then
		start-stop-daemon --stop \
				  --quiet \
				  --retry=TERM/30/KILL/5 \
				  --pidfile $PIDFILE \
				  --name $NAME
		RETVAL="$?"
		[ "$RETVAL" = 2 ] && return 2
		start-stop-daemon --stop \
				  --quiet \
				  --oknodo \
				  --retry=0/30/KILL/5 \
				  --exec $DAEMON

		[ "$?" = 2 ] && return 2
		# Many daemons don't delete their pidfiles when they exit.
		rm -f $PIDFILE
		return "$RETVAL"

	else
		killall -9 $NAME
		RETVAL=$?
		echo
		if [ $RETVAL -ne 0 ]; then
		    return $RETVAL
		fi

	fi
}
#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	if [ $DISTRIB = "DEBIAN" ]
	then

		start-stop-daemon --stop \
				  --signal 1 \
				  --quiet \
				  --pidfile $PIDFILE \
				  --name $NAME
	fi

	return 0
}



case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC " "$NAME"
    do_start
    case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
  ;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	if [ "$(id -u)" != "0" ]; then
	    echo ndpmon can only be restarted by root
	    exit 0
	fi
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
